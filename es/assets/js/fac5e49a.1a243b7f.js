"use strict";(self.webpackChunkmy_parrot_os=self.webpackChunkmy_parrot_os||[]).push([[5978],{3905:(e,n,o)=>{o.d(n,{Zo:()=>c,kt:()=>h});var t=o(7294);function i(e,n,o){return n in e?Object.defineProperty(e,n,{value:o,enumerable:!0,configurable:!0,writable:!0}):e[n]=o,e}function a(e,n){var o=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);n&&(t=t.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),o.push.apply(o,t)}return o}function s(e){for(var n=1;n<arguments.length;n++){var o=null!=arguments[n]?arguments[n]:{};n%2?a(Object(o),!0).forEach((function(n){i(e,n,o[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(o)):a(Object(o)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(o,n))}))}return e}function r(e,n){if(null==e)return{};var o,t,i=function(e,n){if(null==e)return{};var o,t,i={},a=Object.keys(e);for(t=0;t<a.length;t++)o=a[t],n.indexOf(o)>=0||(i[o]=e[o]);return i}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(t=0;t<a.length;t++)o=a[t],n.indexOf(o)>=0||Object.prototype.propertyIsEnumerable.call(e,o)&&(i[o]=e[o])}return i}var d=t.createContext({}),l=function(e){var n=t.useContext(d),o=n;return e&&(o="function"==typeof e?e(n):s(s({},n),e)),o},c=function(e){var n=l(e.components);return t.createElement(d.Provider,{value:n},e.children)},u="mdxType",f={inlineCode:"code",wrapper:function(e){var n=e.children;return t.createElement(t.Fragment,{},n)}},p=t.forwardRef((function(e,n){var o=e.components,i=e.mdxType,a=e.originalType,d=e.parentName,c=r(e,["components","mdxType","originalType","parentName"]),u=l(o),p=i,h=u["".concat(d,".").concat(p)]||u[p]||f[p]||a;return o?t.createElement(h,s(s({ref:n},c),{},{components:o})):t.createElement(h,s({ref:n},c))}));function h(e,n){var o=arguments,i=n&&n.mdxType;if("string"==typeof e||i){var a=o.length,s=new Array(a);s[0]=p;var r={};for(var d in n)hasOwnProperty.call(n,d)&&(r[d]=n[d]);r.originalType=e,r[u]="string"==typeof e?e:i,s[1]=r;for(var l=2;l<a;l++)s[l]=o[l];return t.createElement.apply(null,s)}return t.createElement.apply(null,o)}p.displayName="MDXCreateElement"},5956:(e,n,o)=>{o.r(n),o.d(n,{assets:()=>d,contentTitle:()=>s,default:()=>f,frontMatter:()=>a,metadata:()=>r,toc:()=>l});var t=o(7462),i=(o(7294),o(3905));const a={sidebar_position:7,title:"Picom: Configutations"},s="Configuring the borders, shadows and blurs with Picom",r={unversionedId:"1/Picom configured",id:"1/Picom configured",title:"Picom: Configutations",description:'In this part, the contents of "picom.conf" file are:',source:"@site/docs/1/Picom configured.md",sourceDirName:"1",slug:"/1/Picom configured",permalink:"/my-parrot-os/es/docs/1/Picom configured",draft:!1,tags:[],version:"current",sidebarPosition:7,frontMatter:{sidebar_position:7,title:"Picom: Configutations"},sidebar:"tutorialSidebar",previous:{title:"Polybar",permalink:"/my-parrot-os/es/docs/1/Polybar"},next:{title:"Zsh and p10k",permalink:"/my-parrot-os/es/docs/1/Zsh and p10k"}},d={},l=[],c={toc:l},u="wrapper";function f(e){let{components:n,...o}=e;return(0,i.kt)(u,(0,t.Z)({},c,o,{components:n,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"configuring-the-borders-shadows-and-blurs-with-picom"},"Configuring the borders, shadows and blurs with Picom"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash",metastring:'title="Run as a non-privileged user" showLineNumbers',title:'"Run',as:!0,a:!0,"non-privileged":!0,'user"':!0,showLineNumbers:!0},"mkdir ~/.config/picom\ncd !$\ntouch picom.conf\n")),(0,i.kt)("admonition",{type:"tip"},(0,i.kt)("p",{parentName:"admonition"},'In this part, the contents of "',(0,i.kt)("strong",{parentName:"p"},"picom.conf"),'" file are:'),(0,i.kt)("pre",{parentName:"admonition"},(0,i.kt)("code",{parentName:"pre",className:"language-bash",metastring:'title="Contents of: ~/.config/picom/picom.conf" showLineNumbers',title:'"Contents',"of:":!0,'~/.config/picom/picom.conf"':!0,showLineNumbers:!0},'##############################################################################\n#                                  CORNERS                                   #\n##############################################################################\n# requires: https://github.com/sdhand/compton\ncorner-radius = 20;\nrounded-corners-exclude = [\n  #"window_type = \'normal\'",\n  #"class_g = \'firefox\'",\n];\n\nround-borders = 20;\nround-borders-exclude = [\n  #"class_g = \'TelegramDesktop\'",\n];\n\n# Specify a list of border width rules, in the format `PIXELS:PATTERN`, \n# Note we don\'t make any guarantee about possible conflicts with the\n# border_width set by the window manager.\n#\n# example:\n#    round-borders-rule = [ "2:class_g = \'URxvt\'" ];\n#\nround-borders-rule = [];\n\n##############################################################################\n#                                  SHADOWS                                   #\n##############################################################################\n\n# Enabled client-side shadows on windows. Note desktop windows \n# (windows with \'_NET_WM_WINDOW_TYPE_DESKTOP\') never get shadow, \n# unless explicitly requested using the wintypes option.\n#\nshadow = true\n\n# The blur radius for shadows, in pixels. (defaults to 12)\nshadow-radius = 15\n\n# The opacity of shadows. (0.0 - 1.0, defaults to 0.75)\nshadow-opacity = .5\n\n# The left offset for shadows, in pixels. (defaults to -15)\nshadow-offset-x = -15\n\n# The top offset for shadows, in pixels. (defaults to -15)\nshadow-offset-y = -15\n\n# Avoid drawing shadows on dock/panel windows. This option is deprecated,\n# you should use the *wintypes* option in your config file instead.\n#\n# no-dock-shadow = false\n\n# Don\'t draw shadows on drag-and-drop windows. This option is deprecated, \n# you should use the *wintypes* option in your config file instead.\n#\n# no-dnd-shadow = false\n\n# Red color value of shadow (0.0 - 1.0, defaults to 0).\n# shadow-red = .18\n\n# Green color value of shadow (0.0 - 1.0, defaults to 0).\n# shadow-green = .19\n\n# Blue color value of shadow (0.0 - 1.0, defaults to 0).\n# shadow-blue = .20\n\n# Do not paint shadows on shaped windows. Note shaped windows \n# here means windows setting its shape through X Shape extension. \n# Those using ARGB background is beyond our control. \n# Deprecated, use \n#   shadow-exclude = \'bounding_shaped\'\n# or \n#   shadow-exclude = \'bounding_shaped && !rounded_corners\'\n# instead.\n#\n# shadow-ignore-shaped = \'\'\n\n# Specify a list of conditions of windows that should have no shadow.\n#\n# examples:\n#   shadow-exclude = "n:e:Notification";\n#\n# shadow-exclude = []\nshadow-exclude = [\n    "class_g = \'firefox\' && argb"\n];\n\n# Specify a X geometry that describes the region in which shadow should not\n# be painted in, such as a dock window region. Use \n#    shadow-exclude-reg = "x10+0+0"\n# for example, if the 10 pixels on the bottom of the screen should not have shadows painted on.\n#\n# shadow-exclude-reg = "" \n\n# Crop shadow of a window fully on a particular Xinerama screen to the screen.\n# xinerama-shadow-crop = false\n\n##############################################################################\n#                                  FADING                                    #\n##############################################################################\n\n# Fade windows in/out when opening/closing and when opacity changes,\n#  unless no-fading-openclose is used.\n#fading = true\n\n# Opacity change between steps while fading in. (0.01 - 1.0, defaults to 0.028)\n# fade-in-step = 0.028\nfade-in-step = 0.01;\n\n# Opacity change between steps while fading out. (0.01 - 1.0, defaults to 0.03)\n# fade-out-step = 0.03\nfade-out-step = 0.01;\n\n# The time between steps in fade step, in milliseconds. (> 0, defaults to 10)\n# fade-delta = 10\n\n# Specify a list of conditions of windows that should not be faded.\n# fade-exclude = []\n\n# Do not fade on window open/close.\n# no-fading-openclose = false\n\n# Do not fade destroyed ARGB windows with WM frame. Workaround of bugs in Openbox, Fluxbox, etc.\n# no-fading-destroyed-argb = false\n\n##############################################################################\n#                                   OPACITY                                  #\n##############################################################################\n\n# Opacity of inactive windows. (0.1 - 1.0, defaults to 1.0)\ninactive-opacity = 1.0\n\n# Opacity of window titlebars and borders. (0.1 - 1.0, disabled by default)\nframe-opacity = 1.0\n\n# Default opacity for dropdown menus and popup menus. (0.0 - 1.0, defaults to 1.0)\nopacity = 1.0\n\n# Let inactive opacity set by -i override the \'_NET_WM_OPACITY\' values of windows.\n# inactive-opacity-override = true\ninactive-opacity-override = false;\n\n# Default opacity for active windows. (0.0 - 1.0, defaults to 1.0)\nactive-opacity = 1.0\n\n# Dim inactive windows. (0.0 - 1.0, defaults to 0.0)\n# inactive-dim = 0.0\n\n# Specify a list of conditions of windows that should always be considered focused.\n# focus-exclude = []\nfocus-exclude = [ "class_g = \'Cairo-clock\'" ];\n\n# Use fixed inactive dim value, instead of adjusting according to window opacity.\n# inactive-dim-fixed = 1.0\n\n# Specify a list of opacity rules, in the format `PERCENT:PATTERN`, \n# like `50:name *= "Firefox"`. picom-trans is recommended over this. \n# Note we don\'t make any guarantee about possible conflicts with other \n# programs that set \'_NET_WM_WINDOW_OPACITY\' on frame or client windows.\n# example:\n#    opacity-rule = [ "80:class_g = \'URxvt\'" ];\n#\n# opacity-rule = []\n\n# opacity-rule = [ "98:class_g = \'Polybar\'" ]\n\n##############################################################################\n#                                    BLUR                                    #\n##############################################################################\n\n# Parameters for background blurring, see the *BLUR* section for more information.\nblur-method = "dual_kawase"\nblur-size = 2\nblur-strength = 3\n\n# Blur background of semi-transparent / ARGB windows. \n# Bad in performance, with driver-dependent behavior. \n# The name of the switch may change without prior notifications.\n#\nblur-background = true\n\n# Blur background of windows when the window frame is not opaque. \n# Implies:\n#    blur-background \n# Bad in performance, with driver-dependent behavior. The name may change.\n#\n#blur-background-frame = false\n\n\n# Use fixed blur strength rather than adjusting according to window opacity.\n#blur-background-fixed = false\n\n\n# Specify the blur convolution kernel, with the following format:\n# example:\n#   blur-kern = "5,5,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1";\n#\n# blur-kern = \'\'\n# blur-kern = "3x3box";\n\n# Exclude conditions for background blur.\n# blur-background-exclude = []\n#blur-background-exclude = [\n#    "! name~=\'\'",\n#    "name *= \'slop\'",\n#    "window_type = \'dock\'",\n#    "window_type = \'desktop\'",\n#    "_GTK_FRAME_EXTENTS@:c"\n#];\n\n##############################################################################\n#                                    GENERAL                                 #\n##############################################################################\n\n# Daemonize process. Fork to background after initialization. Causes issues with certain (badly-written) drivers.\n# daemon = false\n\n# Specify the backend to use: `xrender`, `glx`, or `xr_glx_hybrid`.\n# `xrender` is the default one.\n#\n# backend = \'glx\'\nbackend = "glx";\n\n# Enable/disable VSync.\n# vsync = false\nvsync = false\n\n# Enable remote control via D-Bus. See the *D-BUS API* section below for more details.\n# dbus = false\n\n# Try to detect WM windows (a non-override-redirect window with no \n# child that has \'WM_STATE\') and mark them as active.\n#\n# mark-wmwin-focused = false\nmark-wmwin-focused = true;\n\n# Mark override-redirect windows that doesn\'t have a child window with \'WM_STATE\' focused.\n# mark-ovredir-focused = false\nmark-ovredir-focused = true;\n\n# Try to detect windows with rounded corners and don\'t consider them \n# shaped windows. The accuracy is not very high, unfortunately.\n#\n# detect-rounded-corners = false\ndetect-rounded-corners = true;\n\n# Detect \'_NET_WM_OPACITY\' on client windows, useful for window managers\n# not passing \'_NET_WM_OPACITY\' of client windows to frame windows.\n#\n# detect-client-opacity = false\ndetect-client-opacity = true;\n\n# Specify refresh rate of the screen. If not specified or 0, picom will \n# try detecting this with X RandR extension.\n#\n# refresh-rate = 60\nrefresh-rate = 0\n\n# Limit picom to repaint at most once every 1 / \'refresh_rate\' second to \n# boost performance. This should not be used with \n#   vsync drm/opengl/opengl-oml\n# as they essentially does sw-opti\'s job already, \n# unless you wish to specify a lower refresh rate than the actual value.\n#\n# sw-opti = \n\n# Use EWMH \'_NET_ACTIVE_WINDOW\' to determine currently focused window, \n# rather than listening to \'FocusIn\'/\'FocusOut\' event. Might have more accuracy, \n# provided that the WM supports it.\n#\n# use-ewmh-active-win = false\n\n# Unredirect all windows if a full-screen opaque window is detected, \n# to maximize performance for full-screen windows. Known to cause flickering \n# when redirecting/unredirecting windows.\n#\n# unredir-if-possible = false\n\n# Delay before unredirecting the window, in milliseconds. Defaults to 0.\n# unredir-if-possible-delay = 0\n\n# Conditions of windows that shouldn\'t be considered full-screen for unredirecting screen.\n# unredir-if-possible-exclude = []\n\n# Use \'WM_TRANSIENT_FOR\' to group windows, and consider windows \n# in the same group focused at the same time.\n#\n# detect-transient = false\ndetect-transient = true\n\n# Use \'WM_CLIENT_LEADER\' to group windows, and consider windows in the same \n# group focused at the same time. \'WM_TRANSIENT_FOR\' has higher priority if \n# detect-transient is enabled, too.\n#\n# detect-client-leader = false\ndetect-client-leader = true\n\n# Resize damaged region by a specific number of pixels. \n# A positive value enlarges it while a negative one shrinks it. \n# If the value is positive, those additional pixels will not be actually painted \n# to screen, only used in blur calculation, and such. (Due to technical limitations, \n# with use-damage, those pixels will still be incorrectly painted to screen.) \n# Primarily used to fix the line corruption issues of blur, \n# in which case you should use the blur radius value here \n# (e.g. with a 3x3 kernel, you should use `--resize-damage 1`, \n# with a 5x5 one you use `--resize-damage 2`, and so on). \n# May or may not work with *--glx-no-stencil*. Shrinking doesn\'t function correctly.\n#\n# resize-damage = 1\n\n# Specify a list of conditions of windows that should be painted with inverted color. \n# Resource-hogging, and is not well tested.\n#\n# invert-color-include = []\n\n# GLX backend: Avoid using stencil buffer, useful if you don\'t have a stencil buffer. \n# Might cause incorrect opacity when rendering transparent content (but never \n# practically happened) and may not work with blur-background. \n# My tests show a 15% performance boost. Recommended.\n#\n# glx-no-stencil = false\n\n# GLX backend: Avoid rebinding pixmap on window damage. \n# Probably could improve performance on rapid window content changes, \n# but is known to break things on some drivers (LLVMpipe, xf86-video-intel, etc.).\n# Recommended if it works.\n#\n# glx-no-rebind-pixmap = false\n\n# Disable the use of damage information. \n# This cause the whole screen to be redrawn everytime, instead of the part of the screen\n# has actually changed. Potentially degrades the performance, but might fix some artifacts.\n# The opposing option is use-damage\n#\n# no-use-damage = false\nuse-damage = false\n\n# Use X Sync fence to sync clients\' draw calls, to make sure all draw \n# calls are finished before picom starts drawing. Needed on nvidia-drivers \n# with GLX backend for some users.\n#\n# xrender-sync-fence = false\n\n# GLX backend: Use specified GLSL fragment shader for rendering window contents. \n# See `compton-default-fshader-win.glsl` and `compton-fake-transparency-fshader-win.glsl` \n# in the source tree for examples.\n#\n# glx-fshader-win = \'\'\n\n# Force all windows to be painted with blending. Useful if you \n# have a glx-fshader-win that could turn opaque pixels transparent.\n#\n# force-win-blend = false\n\n# Do not use EWMH to detect fullscreen windows. \n# Reverts to checking if a window is fullscreen based only on its size and coordinates.\n#\n# no-ewmh-fullscreen = false\n\n# Dimming bright windows so their brightness doesn\'t exceed this set value. \n# Brightness of a window is estimated by averaging all pixels in the window, \n# so this could comes with a performance hit. \n# Setting this to 1.0 disables this behaviour. Requires --use-damage to be disabled. (default: 1.0)\n#\n# max-brightness = 1.0\n\n# Make transparent windows clip other windows like non-transparent windows do,\n# instead of blending on top of them.\n#\n# transparent-clipping = false\n\n# Set the log level. Possible values are:\n#  "trace", "debug", "info", "warn", "error"\n# in increasing level of importance. Case doesn\'t matter. \n# If using the "TRACE" log level, it\'s better to log into a file \n# using *--log-file*, since it can generate a huge stream of logs.\n#\n# log-level = "debug"\nlog-level = "warn";\n\n# Set the log file.\n# If *--log-file* is never specified, logs will be written to stderr. \n# Otherwise, logs will to written to the given file, though some of the early \n# logs might still be written to the stderr. \n# When setting this option from the config file, it is recommended to use an absolute path.\n#\n# log-file = \'/path/to/your/log/file\'\n\n# Show all X errors (for debugging)\n# show-all-xerrors = false\n\n# Write process ID to a file.\n# write-pid-path = \'/path/to/your/log/file\'\n\n# Window type settings\n# \n# \'WINDOW_TYPE\' is one of the 15 window types defined in EWMH standard: \n#     "unknown", "desktop", "dock", "toolbar", "menu", "utility", \n#     "splash", "dialog", "normal", "dropdown_menu", "popup_menu", \n#     "tooltip", "notification", "combo", and "dnd".\n# \n# Following per window-type options are available: ::\n# \n#   fade, shadow:::\n#     Controls window-type-specific shadow and fade settings.\n# \n#   opacity:::\n#     Controls default opacity of the window type.\n# \n#   focus:::\n#     Controls whether the window of this type is to be always considered focused. \n#     (By default, all window types except "normal" and "dialog" has this on.)\n# \n#   full-shadow:::\n#     Controls whether shadow is drawn under the parts of the window that you \n#     normally won\'t be able to see. Useful when the window has parts of it \n#     transparent, and you want shadows in those areas.\n# \n#   redir-ignore:::\n#     Controls whether this type of windows should cause screen to become \n#     redirected again after been unredirected. If you have unredir-if-possible\n#     set, and doesn\'t want certain window to cause unnecessary screen redirection, \n#     you can set this to `true`.\n#\nwintypes:\n{\n  tooltip = { fade = true; shadow = true; shadow-radius = 0; shadow-opacity = 1.0; shadow-offset-x = -20; shadow-offset-y = -20; opacity = 0.8; full-shadow = true; }; \n  dnd = { shadow = false; }\n  dropdown_menu = { shadow = false; };\n  popup_menu    = { shadow = false; };\n  utility       = { shadow = false; };\n}\n'))),(0,i.kt)("admonition",{type:"tip"},(0,i.kt)("p",{parentName:"admonition"},"And now we need to make the following changes to the ",(0,i.kt)("inlineCode",{parentName:"p"},"~/.config/bspwm/bspwmrc")," file:"),(0,i.kt)("pre",{parentName:"admonition"},(0,i.kt)("code",{parentName:"pre",className:"language-bash",metastring:'title="Contents of: ~/.config/bspwm/bspwmrc" {22,23} showLineNumbers',title:'"Contents',"of:":!0,'~/.config/bspwm/bspwmrc"':!0,"{22,23}":!0,showLineNumbers:!0},"#! /bin/sh\n\npgrep -x sxhkd > /dev/null || sxhkd &\n\nbspc monitor -d I II III IV V VI VII VIII IX X\n\nbspc config border_width 2\nbspc config window_gap 12\n\nbspc config split_ratio 0.52\nbspc config borderless_monocle true\nbspc config gapless_monocle true\n\nbspc rule -a Gimp desktop='^8' state=floating follow=on\nbspc rule -a Chromium desktop='^2'\nbspc rule -a mplayer2 state=floating\nbspc rule -a Kupfer.py focus=on\nbspc rule -a Screenkey manage=off\n\nfeh --bg-fill /home/ramiro/Im\xe1genes/fondo.jpg &\n~/.config/polybar/./launch.sh\npicom &\nbspc config border_width 0\n"))),(0,i.kt)("admonition",{type:"note"},(0,i.kt)("p",{parentName:"admonition"},'If you find that the machine is running a bit slow, you can improve performance by tweaking some of the lines in the file "',(0,i.kt)("inlineCode",{parentName:"p"},"~/.config/picom/picom.conf"),'".'),(0,i.kt)("pre",{parentName:"admonition"},(0,i.kt)("code",{parentName:"pre",className:"language-bash",metastring:'title="Set as false" {1}',title:'"Set',as:!0,'false"':!0,"{1}":!0},"shadow = false\n")),(0,i.kt)("pre",{parentName:"admonition"},(0,i.kt)("code",{parentName:"pre",className:"language-bash",metastring:'title="Comment line" {1}',title:'"Comment','line"':!0,"{1}":!0},'# blur-method = "dual_kawase"\n'))))}f.isMDXComponent=!0}}]);